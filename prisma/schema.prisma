// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Task {
    id          String  @id @default(cuid())
    name        String
    description String?

    assignedUsers User[]
    dueDate       DateTime?

    order Int

    listId    String
    list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model List {
    id          String  @id @default(cuid())
    name        String
    description String?
    boardId     String
    board       Board   @relation(fields: [boardId], references: [id], onDelete: Cascade)
    tasks       Task[]

    color String
    order Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum BoardRole {
    OWNER
    EDITOR
    VIEWER
}

model BoardAccess {
    id      String    @id @default(cuid())
    userId  String
    boardId String
    role    BoardRole
    user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    board   Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)

    @@unique([userId, boardId])
}

model Board {
    id          String  @id @default(cuid())
    name        String
    description String?

    boardAccess BoardAccess[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    List      List[]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    BoardAccess   BoardAccess[]
    Task          Task?         @relation(fields: [taskId], references: [id])
    taskId        String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
